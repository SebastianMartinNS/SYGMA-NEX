# Docker Compose per SIGMA-NEX
# Configurazione completa per sviluppo e produzione

version: '3.8'

# Reti
networks:
  sigma-net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumi
volumes:
  sigma-data:
    driver: local
  ollama-data:
    driver: local
  sigma-logs:
    driver: local

# Servizi
services:
  # Servizio principale SIGMA-NEX
  sigma-nex:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: sigma-nex-app
    restart: unless-stopped
    
    # Rete
    networks:
      - sigma-net
    
    # Porte
    ports:
      - "8000:8000"
    
    # Volumi
    volumes:
      - sigma-data:/app/data
      - sigma-logs:/app/logs
      - ./config.yaml:/app/config.yaml:ro
    
    # Variabili d'ambiente
    environment:
      - SIGMA_LOG_LEVEL=INFO
      - SIGMA_SECURITY_MODE=enabled
      - ENABLE_OLLAMA=true
      - OLLAMA_HOST=http://ollama:11434
      - PORT=8000
    
    # Dipendenze
    depends_on:
      ollama:
        condition: service_healthy
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Limiti risorse
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    
    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # Servizio Ollama per modelli LLM
  ollama:
    image: ollama/ollama:latest
    container_name: sigma-ollama
    restart: unless-stopped
    
    # Rete
    networks:
      - sigma-net
    
    # Porte (solo interna)
    expose:
      - "11434"
    
    # Volumi
    volumes:
      - ollama-data:/root/.ollama
    
    # Variabili d'ambiente
    environment:
      - OLLAMA_HOST=0.0.0.0:11434
      - OLLAMA_KEEP_ALIVE=24h
      - OLLAMA_MAX_LOADED_MODELS=2
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    
    # Limiti risorse
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G
    
    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # Servizio per inizializzazione modelli
  ollama-init:
    image: ollama/ollama:latest
    container_name: sigma-ollama-init
    
    # Rete
    networks:
      - sigma-net
    
    # Dipendenze
    depends_on:
      ollama:
        condition: service_healthy
    
    # Variabili d'ambiente
    environment:
      - OLLAMA_HOST=http://ollama:11434
    
    # Comando per scaricare modelli
    command: >
      sh -c "
        echo 'ðŸ”„ Inizializzando modelli Ollama...' &&
        ollama pull mistral &&
        echo 'âœ… Modello Mistral scaricato' &&
        ollama pull medllama2 &&
        echo 'âœ… Modello MedLlama2 scaricato' &&
        echo 'ðŸŽ‰ Tutti i modelli pronti!'
      "
    
    # Restart policy
    restart: "no"

  # Servizio di monitoraggio (opzionale)
  monitoring:
    image: prom/prometheus:latest
    container_name: sigma-monitoring
    restart: unless-stopped
    
    # Rete
    networks:
      - sigma-net
    
    # Porte
    ports:
      - "9090:9090"
    
    # Configurazione Prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    
    # Comando
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    
    # Profilo opzionale
    profiles:
      - monitoring

  # Database per logging avanzato (opzionale)
  postgres:
    image: postgres:15-alpine
    container_name: sigma-postgres
    restart: unless-stopped
    
    # Rete
    networks:
      - sigma-net
    
    # Porte (solo interna)
    expose:
      - "5432"
    
    # Volumi
    volumes:
      - postgres-data:/var/lib/postgresql/data
    
    # Variabili d'ambiente
    environment:
      - POSTGRES_DB=sigma_nex
      - POSTGRES_USER=sigma
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-sigma123}
    
    # Health check
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sigma -d sigma_nex"]
      interval: 30s
      timeout: 10s
      retries: 5
    
    # Profilo opzionale
    profiles:
      - database