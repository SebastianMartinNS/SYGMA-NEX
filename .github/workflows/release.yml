name: üè∑Ô∏è Release Automation

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Type of release'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

# GitHub token permissions
permissions:
  contents: write
  packages: write
  pull-requests: write

env:
  PYTHON_VERSION: '3.11'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DOCKER_IMAGE: ghcr.io/sebastianmartinns/sigma-nex

jobs:
  # üîñ Version management
  version:
    name: üîñ Version Management
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    
    steps:
    - name: üì• Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: üêç Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name:  Get or create version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          # Manual release - calculate new version
          echo "Creating new ${{ inputs.release_type }} release..."
          
          # Get current version from __init__.py
          CURRENT_VERSION=$(python -c "import sys; sys.path.append('sigma_nex'); import __init__; print(__init__.__version__)")
          echo "Current version: $CURRENT_VERSION"
          
          # Simple version bumping
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          case "${{ inputs.release_type }}" in
            "major")
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            "minor")
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            "patch")
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          VERSION="${MAJOR}.${MINOR}.${PATCH}"
          TAG="v${VERSION}"
          
          # Push changes with retry mechanism
          for i in {1..3}; do
            if git push origin HEAD:${{ github.ref_name }} --tags; then
              echo "‚úÖ Release pushed successfully"
              break
            else
              echo "‚ö†Ô∏è Push failed, attempt $i/3. Pulling latest changes..."
              git pull --rebase origin ${{ github.ref_name }}
              sleep 2
            fi
          done
          
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "is_prerelease=${{ inputs.prerelease }}" >> $GITHUB_OUTPUT
        else
          # Tagged release
          TAG=${GITHUB_REF#refs/tags/}
          VERSION=${TAG#v}
          
          # Check if it's a prerelease
          if [[ "$TAG" =~ (alpha|beta|rc) ]]; then
            IS_PRERELEASE=true
          else
            IS_PRERELEASE=false
          fi
          
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "is_prerelease=${IS_PRERELEASE}" >> $GITHUB_OUTPUT
        fi

  # üèóÔ∏è Build artifacts
  build:
    name: üèóÔ∏è Build Artifacts
    needs: version
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.version.outputs.tag }}

    - name: üêç Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: üì¶ Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel setuptools

    - name: ‚úèÔ∏è Update version in files
      run: |
        VERSION=${{ needs.version.outputs.version }}
        
        # Update pyproject.toml
        sed -i "s/version = \".*\"/version = \"${VERSION}\"/" pyproject.toml
        
        # Update __init__.py
        echo "__version__ = \"${VERSION}\"" > sigma_nex/__init__.py

    - name: üèóÔ∏è Build source distribution
      run: python -m build --sdist

    - name: üèóÔ∏è Build wheel
      run: python -m build --wheel

    - name: üîç Check distributions
      run: |
        pip install twine
        twine check dist/*

    - name: üìä Show build info
      run: |
        ls -la dist/
        tar -tzf dist/*.tar.gz | head -20
        unzip -l dist/*.whl | head -20

    - name: üì§ Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-packages
        path: dist/

  # üê≥ Build Docker image
  docker-build:
    name: üê≥ Build Docker Image
    needs: version
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.version.outputs.tag }}

    - name: üê≥ Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: üîê Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: üè∑Ô∏è Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_IMAGE }}
        tags: |
          type=semver,pattern={{version}},value=${{ needs.version.outputs.version }}
          type=semver,pattern={{major}}.{{minor}},value=${{ needs.version.outputs.version }}
          type=semver,pattern={{major}},value=${{ needs.version.outputs.version }}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: üèóÔ∏è Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: production
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VERSION=${{ needs.version.outputs.version }}

    - name: üîç Test Docker image
      run: |
        docker run --rm \
          -e SIGMA_SKIP_OLLAMA=true \
          ${{ env.DOCKER_IMAGE }}:${{ needs.version.outputs.version }} \
          python -m sigma_nex self-check

  # üìÑ Generate release notes
  release-notes:
    name: üìÑ Generate Release Notes
    needs: version
    runs-on: ubuntu-latest
    outputs:
      release_notes: ${{ steps.notes.outputs.release_notes }}
    
    steps:
    - name: üì• Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: üìù Extract changelog
      id: changelog
      run: |
        VERSION=${{ needs.version.outputs.version }}
        
        # Estrai sezione dalla CHANGELOG.md
        awk "/^## \[${VERSION}\]/{flag=1; next} /^## \[/{flag=0} flag" CHANGELOG.md > current_changes.md
        
        # Se non trova la sezione, genera automaticamente
        if [ ! -s current_changes.md ]; then
          echo "### What's Changed" > current_changes.md
          echo "" >> current_changes.md
          
          # Ottieni l'ultimo tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^)
          
          # Genera note dai commit
          git log ${LAST_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges >> current_changes.md
        fi

    - name: üìä Generate statistics
      id: stats
      run: |
        # Statistiche del rilascio
        echo "" >> current_changes.md
        echo "### üìä Release Statistics" >> current_changes.md
        echo "" >> current_changes.md
        
        # Conta file modificati
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -n "$LAST_TAG" ]; then
          FILES_CHANGED=$(git diff --name-only ${LAST_TAG}..HEAD | wc -l)
          COMMITS=$(git rev-list --count ${LAST_TAG}..HEAD)
          ADDITIONS=$(git diff --shortstat ${LAST_TAG}..HEAD | awk '{print $4}' | sed 's/,//')
          DELETIONS=$(git diff --shortstat ${LAST_TAG}..HEAD | awk '{print $6}')
          
          echo "- üìÅ Files changed: ${FILES_CHANGED}" >> current_changes.md
          echo "- üíæ Commits: ${COMMITS}" >> current_changes.md
          echo "- ‚ûï Lines added: ${ADDITIONS:-0}" >> current_changes.md
          echo "- ‚ûñ Lines deleted: ${DELETIONS:-0}" >> current_changes.md
        fi

    - name: üéØ Add contributors
      run: |
        echo "" >> current_changes.md
        echo "### üë• Contributors" >> current_changes.md
        echo "" >> current_changes.md
        echo "Thanks to all contributors who made this release possible:" >> current_changes.md
        echo "" >> current_changes.md
        
        # Ottieni contributori
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -n "$LAST_TAG" ]; then
          git log ${LAST_TAG}..HEAD --pretty=format:"- @%an" | sort -u >> current_changes.md
        else
          echo "- @${{ github.actor }}" >> current_changes.md
        fi

    - name: üìù Finalize release notes
      id: notes
      run: |
        # Genera README professionale per la release
        {
          echo "<div align=\"center\">"
          echo ""
          echo "![SIGMA-NEX Logo](https://raw.githubusercontent.com/SebastianMartinNS/SYGMA-NEX/master/assets/logo.jpg)"
          echo ""
          echo "# üöÄ SIGMA-NEX v${{ needs.version.outputs.version }}"
          echo ""
          echo "**Sistema di Intelligenza Artificiale Autonomo per la Sopravvivenza Offline-First**"
          echo ""
          echo "![Version](https://img.shields.io/badge/Version-${{ needs.version.outputs.version }}-blue?style=for-the-badge)"
          echo "![Release Date](https://img.shields.io/badge/Release-$(date +%Y--%m--%d)-green?style=for-the-badge)"
          echo "![Platform](https://img.shields.io/badge/Platform-Windows%20%7C%20Linux%20%7C%20macOS-lightgrey?style=for-the-badge)"
          echo ""
          echo "[üì• Download](https://github.com/SebastianMartinNS/SYGMA-NEX/releases/tag/v${{ needs.version.outputs.version }}) | "
          echo "[üìö Documentation](https://github.com/SebastianMartinNS/SYGMA-NEX/blob/master/docs/) | "
          echo "[üêõ Issues](https://github.com/SebastianMartinNS/SYGMA-NEX/issues) | "
          echo "[üí¨ Discussions](https://github.com/SebastianMartinNS/SYGMA-NEX/discussions)"
          echo ""
          echo "</div>"
          echo ""
          echo "---"
          echo ""
          echo "## üåü Panoramica Release"
          echo ""
          echo "SIGMA-NEX v${{ needs.version.outputs.version }} rappresenta un significativo passo avanti nell'evoluzione del nostro sistema di intelligenza artificiale autonomo. Progettato per scenari critici e ambienti offline, questa release introduce miglioramenti sostanziali in termini di performance, usabilit√† e robustezza."
          echo ""
          echo "### ‚ú® Caratteristiche Principali"
          echo ""
          echo "- üè† **100% Offline**: Funziona completamente senza connessione internet"
          echo "- üß† **AI Locale**: Utilizza Ollama per modelli linguistici avanzati"
          echo "- ü©∫ **Specializzazione Medica**: Moduli dedicati per emergenze sanitarie"
          echo "- üîç **Ricerca Semantica**: Database vettoriale FAISS per retrieval intelligente"
          echo "- üåç **Traduzione Multilingue**: Supporto offline per 50+ lingue"
          echo "- üõ°Ô∏è **Security-First**: Crittografia e validazione completa degli input"
          echo ""
          echo "---"
          echo ""
          echo "## üÜï Novit√† in questa Release"
          echo ""
          cat current_changes.md
          echo ""
          echo "---"
          echo ""
          echo "## ÔøΩ Installazione Rapida"
          echo ""
          echo "### Prerequisiti"
          echo "- **Python**: 3.10+ (raccomandato 3.11)"
          echo "- **Ollama**: [Download obbligatorio](https://ollama.com)"
          echo "- **RAM**: Minimo 8GB, raccomandati 16GB+"
          echo "- **Storage**: 5GB per modelli e dati"
          echo ""
          echo "### üêç Installazione Python"
          echo "\`\`\`bash"
          echo "# Installazione diretta da PyPI"
          echo "pip install sigma-nex==${{ needs.version.outputs.version }}"
          echo ""
          echo "# Aggiornamento da versione precedente"
          echo "pip install --upgrade sigma-nex"
          echo ""
          echo "# Verifica installazione"
          echo "sigma self-check"
          echo "\`\`\`"
          echo ""
          echo "### üê≥ Installazione Docker"
          echo "\`\`\`bash"
          echo "# Pull dell'immagine specifica"
          echo "docker pull ghcr.io/sebastianmartinns/sygma-nex:${{ needs.version.outputs.version }}"
          echo ""
          echo "# Pull dell'ultima versione stabile"
          echo "docker pull ghcr.io/sebastianmartinns/sygma-nex:latest"
          echo ""
          echo "# Avvio container"
          echo "docker run -p 8000:8000 ghcr.io/sebastianmartinns/sygma-nex:${{ needs.version.outputs.version }}"
          echo "\`\`\`"
          echo ""
          echo "### ÔøΩ Installazione da Sorgente"
          echo "\`\`\`bash"
          echo "# Clone del repository"
          echo "git clone https://github.com/SebastianMartinNS/SYGMA-NEX.git"
          echo "cd SYGMA-NEX"
          echo "git checkout v${{ needs.version.outputs.version }}"
          echo ""
          echo "# Setup automatico"
          echo "pip install -e ."
          echo ""
          echo "# Installazione modelli AI"
          echo "ollama pull mistral"
          echo "\`\`\`"
          echo ""
          echo "---"
          echo ""
          echo "## üéÆ Quick Start"
          echo ""
          echo "\`\`\`bash"
          echo "# Verifica installazione e configurazione"
          echo "sigma self-check"
          echo ""
          echo "# Avvia modalit√† interattiva"
          echo "sigma start"
          echo ""
          echo "# Avvia server API REST"
          echo "sigma server"
          echo ""
          echo "# Avvia interfaccia grafica"
          echo "sigma gui"
          echo ""
          echo "# Aggiorna sistema"
          echo "sigma update"
          echo "\`\`\`"
          echo ""
          echo "### üåê Test API"
          echo "\`\`\`bash"
          echo "# Health check"
          echo "curl http://localhost:8000/"
          echo ""
          echo "# Query di test"
          echo "curl -X POST http://localhost:8000/ask \\\\"
          echo "  -H \"Content-Type: application/json\" \\\\"
          echo "  -d '{\"question\": \"Come disinfettare una ferita?\"}'"
          echo "\`\`\`"
          echo ""
          echo "---"
          echo ""
          echo "## üìö Documentazione Completa"
          echo ""
          echo "### üìñ Guide per Utenti"
          echo "- **[üè† Homepage](https://github.com/SebastianMartinNS/SYGMA-NEX)** - Panoramica generale del progetto"
          echo "- **[‚ö° Quick Start](https://github.com/SebastianMartinNS/SYGMA-NEX/blob/master/README.md#installazione-rapida)** - Guida rapida per iniziare"
          echo "- **[üîß Installazione Dettagliata](https://github.com/SebastianMartinNS/SYGMA-NEX/blob/master/docs/installation.md)** - Setup completo e configurazione"
          echo "- **[üíª Guida CLI](https://github.com/SebastianMartinNS/SYGMA-NEX/blob/master/docs/guides/cli-guide.md)** - Interfaccia a riga di comando"
          echo "- **[üñ•Ô∏è Guida GUI](https://github.com/SebastianMartinNS/SYGMA-NEX/blob/master/docs/guides/gui-guide.md)** - Interfaccia grafica desktop"
          echo "- **[‚öôÔ∏è Configurazione](https://github.com/SebastianMartinNS/SYGMA-NEX/blob/master/docs/guides/configuration.md)** - Setup avanzato e personalizzazione"
          echo ""
          echo "### üõ†Ô∏è Guide per Sviluppatori"
          echo "- **[üî® Setup Sviluppo](https://github.com/SebastianMartinNS/SYGMA-NEX/blob/master/docs/development.md)** - Ambiente di sviluppo"
          echo "- **[üåê API Reference](https://github.com/SebastianMartinNS/SYGMA-NEX/blob/master/docs/api.md)** - Documentazione API REST"
          echo "- **[üß™ Testing Guide](https://github.com/SebastianMartinNS/SYGMA-NEX/blob/master/docs/testing.md)** - Framework di testing"
          echo "- **[üèóÔ∏è Architettura](https://github.com/SebastianMartinNS/SYGMA-NEX/blob/master/docs/architecture/)** - Design e architettura sistema"
          echo "- **[ü§ù Contributing](https://github.com/SebastianMartinNS/SYGMA-NEX/blob/master/CONTRIBUTING.md)** - Come contribuire al progetto"
          echo ""
          echo "### ÔøΩ Deploy e Produzione"
          echo "- **[üöÄ Deployment Guide](https://github.com/SebastianMartinNS/SYGMA-NEX/blob/master/docs/deployment.md)** - Deploy in produzione"
          echo "- **[üê≥ Docker Guide](https://github.com/SebastianMartinNS/SYGMA-NEX/blob/master/docs/guides/docker.md)** - Containerizzazione e orchestrazione"
          echo "- **[üîß Troubleshooting](https://github.com/SebastianMartinNS/SYGMA-NEX/blob/master/docs/guides/troubleshooting.md)** - Risoluzione problemi comuni"
          echo "- **[ÔøΩÔ∏è Security Guide](https://github.com/SebastianMartinNS/SYGMA-NEX/blob/master/docs/guides/security.md)** - Configurazione sicurezza"
          echo ""
          echo "---"
          echo ""
          echo "## üîß Requisiti di Sistema"
          echo ""
          echo "### Requisiti Minimi"
          echo "- **Sistema Operativo**: Windows 10+, Linux (Ubuntu 20.04+), macOS 11+"
          echo "- **Python**: 3.10 o superiore"
          echo "- **RAM**: 8GB disponibili"
          echo "- **Storage**: 5GB liberi per modelli e cache"
          echo "- **Ollama**: Installazione obbligatoria"
          echo ""
          echo "### Configurazione Raccomandata"
          echo "- **RAM**: 16GB+ per performance ottimali"
          echo "- **CPU**: 8+ core per elaborazione parallela"
          echo "- **Storage**: SSD per accesso rapido ai modelli"
          echo "- **GPU**: Opzionale, supporto CUDA per accelerazione"
          echo ""
          echo "---"
          echo ""
          echo "## ‚ö†Ô∏è Breaking Changes e Migrazione"
          echo ""
          # Controlla se ci sono breaking changes nel changelog
          if grep -qi "breaking\|incompatible\|removed\|deprecated" current_changes.md 2>/dev/null; then
            echo "‚ö†Ô∏è **Attenzione**: Questa release contiene modifiche che potrebbero richiedere aggiornamenti:"
            echo ""
            grep -i "breaking\|incompatible\|removed\|deprecated" current_changes.md | head -5 | sed 's/^/- /'
            echo ""
            echo "üìñ **Guida Migrazione**: Consulta la [documentazione di migrazione](https://github.com/SebastianMartinNS/SYGMA-NEX/blob/master/docs/guides/migration.md) per dettagli completi."
          else
            echo "‚úÖ **Nessuna Breaking Change**: Questa release √® completamente backward-compatible."
          fi
          echo ""
          echo "---"
          echo ""
          echo "## üèóÔ∏è Architettura di Sistema"
          echo ""
          echo "\`\`\`"
          echo "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê"
          echo "‚îÇ                        SIGMA-NEX v${{ needs.version.outputs.version }}                        ‚îÇ"
          echo "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§"
          echo "‚îÇ  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê             ‚îÇ"
          echo "‚îÇ  ‚îÇ     CLI     ‚îÇ  ‚îÇ     GUI     ‚îÇ  ‚îÇ  REST API   ‚îÇ             ‚îÇ"
          echo "‚îÇ  ‚îÇ   Terminal  ‚îÇ  ‚îÇ   Tkinter   ‚îÇ  ‚îÇ   FastAPI   ‚îÇ             ‚îÇ"
          echo "‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò             ‚îÇ"
          echo "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§"
          echo "‚îÇ  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê             ‚îÇ"
          echo "‚îÇ  ‚îÇ   Runner    ‚îÇ  ‚îÇ  Retriever  ‚îÇ  ‚îÇ Translator  ‚îÇ             ‚îÇ"
          echo "‚îÇ  ‚îÇ (Core AI)   ‚îÇ  ‚îÇ (Semantic)  ‚îÇ  ‚îÇ (Offline)   ‚îÇ             ‚îÇ"
          echo "‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò             ‚îÇ"
          echo "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§"
          echo "‚îÇ  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê             ‚îÇ"
          echo "‚îÇ  ‚îÇ   Ollama    ‚îÇ  ‚îÇ    FAISS    ‚îÇ  ‚îÇ  MarianMT   ‚îÇ             ‚îÇ"
          echo "‚îÇ  ‚îÇ  (Mistral)  ‚îÇ  ‚îÇ   Index     ‚îÇ  ‚îÇ   Models    ‚îÇ             ‚îÇ"
          echo "‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò             ‚îÇ"
          echo "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"
          echo "\`\`\`"
          echo ""
          echo "---"
          echo ""
          echo "## üîí Sicurezza e Licenza"
          echo ""
          echo "### üõ°Ô∏è Sicurezza"
          echo "- **Offline-First**: Nessun dato viene trasmesso online"
          echo "- **Input Validation**: Sanitizzazione completa degli input utente"
          echo "- **Encryption**: Crittografia AES per dati sensibili"
          echo "- **Audit Logging**: Tracciamento completo delle operazioni"
          echo "- **Zero Trust**: Validazione di ogni componente del sistema"
          echo ""
          echo "### üìÑ Licenza"
          echo "**Creative Commons Attribution-NonCommercial 4.0 International (CC BY-NC 4.0)**"
          echo ""
          echo "‚úÖ **Permesso**: Uso educativo, ricerca, progetti personali"
          echo "‚ùå **Limitazione**: Uso commerciale richiede autorizzazione"
          echo ""
          echo "**Contatti per Licenze Commerciali**: rootedlab6@gmail.com"
          echo ""
          echo "---"
          echo ""
          echo "## üõ†Ô∏è Supporto e Community"
          echo ""
          echo "### üí¨ Canali di Supporto"
          echo "- **[üêõ Bug Reports](https://github.com/SebastianMartinNS/SYGMA-NEX/issues)** - Segnalazione bug e problemi"
          echo "- **[ÔøΩ Feature Requests](https://github.com/SebastianMartinNS/SYGMA-NEX/discussions)** - Richieste nuove funzionalit√†"
          echo "- **[‚ùì Q&A Forum](https://github.com/SebastianMartinNS/SYGMA-NEX/discussions/categories/q-a)** - Domande e risposte"
          echo "- **[üìß Email](mailto:rootedlab6@gmail.com)** - Supporto diretto"
          echo ""
          echo "### ü§ù Come Contribuire"
          echo "1. **Fork** il repository su GitHub"
          echo "2. **Clone** il tuo fork localmente"
          echo "3. **Crea** un branch per la tua feature"
          echo "4. **Implementa** le modifiche e testa"
          echo "5. **Commit** seguendo [Conventional Commits](https://conventionalcommits.org/)"
          echo "6. **Push** e apri una Pull Request"
          echo ""
          echo "### üåü Community Guidelines"
          echo "- Mantieni un tono rispettoso e costruttivo"
          echo "- Fornisci dettagli nei bug report"
          echo "- Testa le modifiche prima di inviare PR"
          echo "- Segui le linee guida di coding del progetto"
          echo ""
          echo "---"
          echo ""
          echo "## üìä Metriche della Release"
        } > final_release_notes.md
        
        # Set output per GitHub Actions
        echo "release_notes=final_release_notes.md" >> $GITHUB_OUTPUT

    - name: üì§ Upload release notes
      uses: actions/upload-artifact@v4
      with:
        name: release-notes
        path: final_release_notes.md

  # üöÄ Create GitHub release
  github-release:
    name: üöÄ GitHub Release
    needs: [version, build, docker-build, release-notes]
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: üè∑Ô∏è Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.version.outputs.tag }}
        name: "SIGMA-NEX ${{ needs.version.outputs.version }}"
        body_path: ./artifacts/release-notes/final_release_notes.md
        files: |
          ./artifacts/python-packages/*.whl
          ./artifacts/python-packages/*.tar.gz
        draft: false
        prerelease: ${{ needs.version.outputs.is_prerelease }}
        generate_release_notes: false

  # üì§ Publish to PyPI
  pypi-publish:
    name: üì§ Publish to PyPI
    needs: [version, build, github-release]
    runs-on: ubuntu-latest
    if: ${{ !needs.version.outputs.is_prerelease }}
    
    steps:
    - name: üì• Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-packages
        path: dist/

    - name: üì§ Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        verbose: true

  # üìß Notification
  notify:
    name: üìß Notify Release
    needs: [version, github-release, pypi-publish]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: üéâ Success notification
      if: ${{ needs.github-release.result == 'success' }}
      run: |
        echo "üéâ SIGMA-NEX ${{ needs.version.outputs.version }} released successfully!"
        echo "üì¶ GitHub Release: ‚úÖ"
        echo "üê≥ Docker Image: ‚úÖ"
        
        if [[ "${{ needs.pypi-publish.result }}" == "success" ]]; then
          echo "üì§ PyPI Publish: ‚úÖ"
        else
          echo "üì§ PyPI Publish: ‚è≠Ô∏è (Skipped for prerelease)"
        fi

    - name: ‚ùå Failure notification
      if: ${{ needs.github-release.result == 'failure' }}
      run: |
        echo "‚ùå Release failed for SIGMA-NEX ${{ needs.version.outputs.version }}"
        echo "Check the logs for details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

    # Opzionale: Invia notifica su Discord/Slack (richiede DISCORD_WEBHOOK secret)
    # - name: üì¢ Discord notification
    #   if: ${{ needs.github-release.result == 'success' && secrets.DISCORD_WEBHOOK }}
    #   uses: Ilshidur/action-discord@master
    #   env:
    #     DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
    #   with:
    #     args: |
    #       üöÄ **SIGMA-NEX ${{ needs.version.outputs.version }}** √® stato rilasciato!
    #       
    #       üì¶ **Download**: https://github.com/SebastianMartinNS/SYGMA-NEX/releases/tag/${{ needs.version.outputs.tag }}
    #       üê≥ **Docker**: `docker pull ghcr.io/sebastianmartinns/sygma-nex:${{ needs.version.outputs.version }}`
    #       üìñ **Changelog**: Controlla le release notes per i dettagli!
